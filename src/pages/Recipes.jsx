import React, { useState, useEffect } from "react";
import { Card, message } from "antd";
import axios from "axios";
import RecipeTable from "../components/RecipeTable";
import EditRecipeModal from "../modals/EditRecipeModal";
import ViewRecipeModal from "../modals/ViewRecipeModal";

const Recipes = () => {
  const [selectedSizeId, setSelectedSizeId] = useState(null);
  const [products, setProducts] = useState([]);
  const [inventory, setInventory] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [ingredients, setIngredients] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [recipeToView, setRecipeToView] = useState(null);

  useEffect(() => {
    loadProducts();
    loadInventory();
  }, []);

  // üîπ Load s·∫£n ph·∫©m
  const loadProducts = async () => {
    try {
      const res = await axios.get("http://localhost:5000/api/products");
      setProducts(res.data);
    } catch {
      message.error("L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m!");
    }
  };

  // üîπ Load nguy√™n v·∫≠t li·ªáu
  const loadInventory = async () => {
    try {
      const res = await axios.get("http://localhost:5000/api/inventory");
      setInventory(res.data);
    } catch {
      message.error("L·ªói khi t·∫£i danh s√°ch nguy√™n v·∫≠t li·ªáu!");
    }
  };

  // üîπ M·ªü modal ch·ªânh s·ª≠a c√¥ng th·ª©c
  const openEditModal = (product, sizeId = null) => {
    const productWithSize = { ...product, sizeId }; // ‚úÖ Th√™m d√≤ng n√†y
    setSelectedProduct(product);
    setSelectedSizeId(sizeId);

    const recipeData =
      sizeId && product.sizes
        ? product.sizes.find((s) => s._id === sizeId)?.recipe || []
        : product.recipe || [];

    // ‚úÖ Mapping l·∫°i d·ªØ li·ªáu theo usageUnit trong kho
    const formattedIngredients = recipeData.map((r) => {
      const inventoryItem = inventory.find(
        (i) => i._id === (r.ingredientId?._id || r.ingredientId)
      );
      return {
        ingredientId: r.ingredientId?._id || r.ingredientId,
        amount: r.qty || r.amount || 0,
        unit: r.unit || inventoryItem?.usageUnit || "",
        costPerUnit: inventoryItem?.cost_per_unit || 0,
      };
    });

    setIngredients(formattedIngredients);
    setModalOpen(true);
  };

  // üîπ M·ªü modal xem c√¥ng th·ª©c
  const openViewModal = (product) => {
    setRecipeToView(product);
    setViewModalOpen(true);
  };

  // üîπ L∆∞u c√¥ng th·ª©c (PUT API)
  const handleSaveRecipe = async (updatedIngredients) => {
    try {
      const payload = {
        sizeId: selectedSizeId,
        recipe: updatedIngredients
          .filter((ing) => ing.ingredientId)
          .map((ing) => ({
            ingredientId: ing.ingredientId,
            qty: ing.amount, // ‚úÖ l∆∞u ƒë√∫ng tr∆∞·ªùng backend ƒë·ªçc
            unit: ing.unit, // ‚úÖ l∆∞u l·∫°i usageUnit ƒë·ªÉ d√πng khi hi·ªÉn th·ªã
          })),
      };
      console.log("Payload g·ª≠i l√™n:", payload);
      await axios.put(
        `http://localhost:5000/api/products/${selectedProduct._id}`,
        payload
      );

      await loadProducts(); // reload l·∫°i s·∫£n ph·∫©m
      message.success("‚úÖ C·∫≠p nh·∫≠t c√¥ng th·ª©c th√†nh c√¥ng!");
      setModalOpen(false);
    } catch (err) {
      console.error("L·ªói khi l∆∞u c√¥ng th·ª©c:", err);
      message.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t c√¥ng th·ª©c!");
    }
  };

  return (
    <div style={{ padding: "1rem", marginBottom: "70px" }}>
      <Card title="üìò Qu·∫£n l√Ω c√¥ng th·ª©c m√≥n">
        <RecipeTable
          products={products}
          inventory={inventory}
          onEdit={(product, sizeId) => openEditModal(product, sizeId)}
          onView={openViewModal}
        />
      </Card>

      {/* Modal ch·ªânh s·ª≠a c√¥ng th·ª©c */}
      <EditRecipeModal
        visible={modalOpen}
        onClose={() => setModalOpen(false)}
        selectedProduct={selectedProduct}
        inventory={inventory}
        onSaveRecipe={handleSaveRecipe}
      />

      {/* Modal xem c√¥ng th·ª©c */}
      <ViewRecipeModal
        open={viewModalOpen}
        onCancel={() => setViewModalOpen(false)}
        recipe={recipeToView}
        inventory={inventory}
      />
    </div>
  );
};

export default Recipes;
