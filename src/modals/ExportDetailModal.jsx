import React, { useMemo } from "react";
import { Modal, Table, Tag } from "antd";
import dayjs from "dayjs";

const ExportDetailModal = ({ exportData, onClose, inventory = [] }) => {
  if (!exportData) return null;
  const isMobile = window.innerWidth < 768;

  // üÜï H√†m tr√≠ch xu·∫•t orderCode t·ª´ note (∆∞u ti√™n d√πng orderCode ƒë√£ ƒë∆∞·ª£c t·∫°o)
  const extractOrderCode = (text) => {
    if (!text) return null;
    
    // ∆Øu ti√™n t√¨m orderCode d·∫°ng "OD-20251029-003"
    const orderCodeMatch = text.match(/(OD-\d{8}-\d{3})/);
    if (orderCodeMatch) {
      return orderCodeMatch[1];
    }
    
    // Fallback: t√¨m orderId c≈© (n·∫øu c√≥)
    const orderIdMatch = text.match(/[#\s]*(?:ƒë∆°n|don)?\s*([a-f0-9]{24})/i);
    return orderIdMatch ? orderIdMatch[1] : null;
  };

  // H√†m t√¨m nguy√™n li·ªáu trong inventory theo ingredientId ho·∫∑c name
  const findIngredient = (item) => {
    if (!inventory || inventory.length === 0) return null;
    return (
      inventory.find((inv) => inv._id === item.ingredientId) ||
      inventory.find((inv) => inv.name === item.name) ||
      null
    );
  };

  // T√≠nh gi√° s·ª≠ d·ª•ng cho t·ª´ng item (tr·∫£ v·ªÅ gi√° tr√™n ƒë∆°n v·ªã s·ª≠ d·ª•ng)
  const itemsWithUsagePrice = useMemo(() => {
    return (exportData.items || []).map((it) => {
      const ing = findIngredient(it);
      // fallback: n·∫øu export item ƒë√£ c√≥ unitCost ch√≠nh x√°c (ƒë√£ t√≠nh t·ª´ backend) th√¨ d√πng lu√¥n
      let displayUnitCost = Number(it.unitCost || 0);

      if (ing) {
        const baseCost = Number(ing.averageCostPerUnit || ing.cost_per_unit || 0);
        const unitWeight = Number(ing.unitWeight || 1); // v√≠ d·ª•: 1000 (1kg) ho·∫∑c 1000 ml...
        const ingUnit = (ing.unit || "").toString();
        const usageUnit = (ing.usageUnit || "").toString();

        if (usageUnit && unitWeight && ingUnit && ingUnit !== usageUnit) {
          // v√≠ d·ª•: cost_per_unit l√† gi√° 1 c√°i/h·ªôp, unitWeight l√† t·ªïng gram trong 1 c√°i/h·ªôp
          displayUnitCost = unitWeight > 0 ? baseCost / unitWeight : baseCost;
        } else {
          // c√πng ƒë∆°n v·ªã ho·∫∑c kh√¥ng c√≥ unitWeight
          displayUnitCost = baseCost;
        }
      }

      // l√†m tr√≤n, hi·ªÉn th·ªã theo ƒë∆°n v·ªã s·ª≠ d·ª•ng
      displayUnitCost = Math.round(displayUnitCost);

      // total theo gi√° s·ª≠ d·ª•ng
      const lineTotal = Math.round((it.quantity || 0) * displayUnitCost);

      return {
        ...it,
        _displayUnitCost: displayUnitCost,
        _lineTotal: lineTotal,
      };
    });
  }, [exportData.items, inventory]);

  const columns = [
    {
      title: "Nguy√™n li·ªáu",
      dataIndex: "name",
      key: "name",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "S·ªë l∆∞·ª£ng",
      dataIndex: "quantity",
      align: "center",
      render: (v) => Number(v || 0).toLocaleString(),
    },
    {
      title: "ƒê∆°n v·ªã",
      dataIndex: "unit",
      align: "center",
    },
    {
      title: "Gi√° (theo ƒë∆°n v·ªã s·ª≠ d·ª•ng)",
      dataIndex: "_displayUnitCost",
      align: "right",
      render: (v) => `${Number(v || 0).toLocaleString("vi-VN")}‚Ç´`,
    },
    {
      title: "T·ªïng (theo gi√° s·ª≠ d·ª•ng)",
      dataIndex: "_lineTotal",
      key: "total",
      align: "right",
      render: (v) => `${Number(v || 0).toLocaleString("vi-VN")}‚Ç´`,
    },
  ];

  const totalValue = itemsWithUsagePrice.reduce((s, i) => s + (i._lineTotal || 0), 0);

  const isExport = exportData.invoiceId?.startsWith("OUT-");
  const isReturn = exportData.invoiceId?.startsWith("RET-");
  
  // üÜï Tr√≠ch xu·∫•t orderCode t·ª´ note (s·∫Ω c√≥ d·∫°ng "OD-20251029-003")
  const orderCode = extractOrderCode(exportData.note);

  return (
    <Modal
      open={true}
      title={
        <div>
          {/* D√≤ng 1: M√£ phi·∫øu xu·∫•t */}
          <div style={{ display: "flex", alignItems: "center", gap: 8, marginBottom: 8 }}>
            {isExport ? (
              <Tag color="red" style={{ fontWeight: 600 }}>
                Phi·∫øu xu·∫•t kho
              </Tag>
            ) : (
              <Tag color="default" style={{ backgroundColor: "#bfbfbf", color: "#fff", fontWeight: 600 }}>
                Phi·∫øu ho√†n kho
              </Tag>
            )}
            <span style={{ fontWeight: 500, fontSize: "0.9rem" }}>
              {exportData.invoiceId}
            </span>
          </div>

          {/* D√≤ng 2: M√É ƒê∆†N H√ÄNG ƒê·∫∏P (ƒë√≥ng khung ƒë·ªè) + Tr·∫°ng th√°i */}
          <div style={{ display: "flex", alignItems: "center", gap: 8, flexWrap: "wrap" }}>
            {/* üÜï KHUNG ƒê·ªé v·ªõi orderCode t·ª´ middleware */}
            {orderCode && (
              <div
                style={{
                  backgroundColor: "#ff4d4f",
                  color: "white",
                  padding: "4px 12px",
                  borderRadius: "6px",
                  fontWeight: "600",
                  fontSize: "0.85rem",
                  display: "inline-flex",
                  alignItems: "center",
                  gap: "4px"
                }}
              >
                <span>üì¶</span>
                <span>{orderCode}</span>
              </div>
            )}

            {/* Tag "ƒê√É HO√ÄN KHO" b√™n c·∫°nh */}
            {exportData.isRefunded ? (
  <div
    style={{
      backgroundColor: "#52c41a",
      color: "#fff",
      padding: "4px 12px",
      borderRadius: "6px",
      fontWeight: "600",
      fontSize: "0.85rem",
    }}
  >
    ƒê√É HO√ÄN KHO + HO√ÄN TI·ªÄN
  </div>
) : exportData.isCancelled ? (
  <div
    style={{
      backgroundColor: "#f0f0f0",
      color: "#555",
      padding: "4px 12px",
      borderRadius: "6px",
      fontWeight: "600",
      fontSize: "0.85rem",
      border: "1px solid #d9d9d9",
    }}
  >
    ƒê√É HO√ÄN KHO
  </div>
) : null}


            {/* Ng√†y th√°ng */}
            <div style={{ fontSize: "0.85rem", color: "#666" }}>
              {dayjs(exportData.date).format("DD/MM/YYYY HH:mm")}
            </div>
          </div>
        </div>
      }
      footer={null}
      onCancel={onClose}
      width={isMobile ? "95%" : 700}
    >
      <Table
        dataSource={itemsWithUsagePrice}
        columns={columns}
        pagination={false}
        rowKey={(r) => r._id || r.name}
        size="small"
        style={{ marginBottom: "1rem" }}
      />

      <div style={{ textAlign: "right", fontWeight: 600 }}>
        T·ªïng gi√° tr·ªã:{" "}
        <span style={{ color: "#1677ff" }}>{(totalValue || 0).toLocaleString("vi-VN")}‚Ç´</span>
      </div>

      {exportData.note && (
        <div style={{ marginTop: 10, color: "#555" }}>
          <strong>Ghi ch√∫:</strong> {exportData.note}
        </div>
      )}
    </Modal>
  );
};

export default ExportDetailModal;