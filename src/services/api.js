import axios from "axios";
import { message } from "antd";

// üîó URL c·ªßa backend server
const API_URL = "http://localhost:5000/api";

// =========================
// üß† AUTH
// =========================

// Test k·∫øt n·ªëi backend
export const testConnection = async () => {
  try {
    const res = await axios.get(`${API_URL}/`);
    return res.data;
  } catch (error) {
    console.error("L·ªói k·∫øt n·ªëi t·ªõi backend:", error);
    return null;
  }
};

// ƒêƒÉng nh·∫≠p
export const loginUser = async (email, password) => {
  try {
    const res = await axios.post(
      `${API_URL}/auth/login`,
      { email, password },
      { headers: { "Content-Type": "application/json" } }
    );
    return res.data;
  } catch (error) {
    throw error.response?.data?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i";
  }
};

// =========================
// ‚òï PRODUCTS (Menu)
// =========================
export const fetchProducts = async () => {
  const res = await axios.get(`${API_URL}/products`);
  return res.data;
};

export const createProduct = async (payload) => {
  const res = await axios.post(`${API_URL}/products`, payload, {
    headers: { "Content-Type": "application/json" },
  });
  return res.data;
};

export const updateProduct = async (id, payload) => {
  const res = await axios.put(`${API_URL}/products/${id}`, payload, {
    headers: { "Content-Type": "application/json" },
  });
  return res.data;
};

// =========================
// üì¶ INVENTORY (Nguy√™n v·∫≠t li·ªáu)
// =========================
export const fetchInventory = async () => {
  const res = await axios.get(`${API_URL}/inventory`);
  return res.data;
};

// Nh·∫≠p h√†ng (t·∫°o phi·∫øu nh·∫≠p)
export const importInventory = async (payload) => {
  const res = await axios.post(`${API_URL}/inventory/import`, payload, {
    headers: { "Content-Type": "application/json" },
  });
  return res.data;
};

// ‚úÖ S·ª≠a: Ch·ªâ l·∫•y phi·∫øu nh·∫≠p c√≥ m√£ IMP-
export const fetchImportHistory = async (query = "") => {
  const res = await axios.get(`${API_URL}/inventory/import-history${query}`);
  return res.data;
};


// üÜï Xem l·ªãch s·ª≠ xu·∫•t h√†ng
export const fetchExportHistory = async (query = "") => {
  const res = await axios.get(`${API_URL}/inventory/export-history${query}`);
  return res.data;
};

// =========================
// üì¶ SERVICES L·∫§Y D·ªÆ LI·ªÜU
// =========================
export const loadInventory = async () => {
  try {
    const res = await fetchInventory();
    return res || [];
  } catch (err) {
    console.error(err);
    message.error("L·ªói khi t·∫£i d·ªØ li·ªáu kho");
    return [];
  }
};

export const loadImportHistory = async (start, end) => {
  try {
    let query = "";
    if (start && end) query = `?start=${start}&end=${end}`;
    const res = await fetchImportHistory(query);
    return res || [];
  } catch (err) {
    console.error(err);
    message.error("L·ªói khi t·∫£i l·ªãch s·ª≠ nh·∫≠p kho");
    return [];
  }
};

// Trong api.js - TH√äM DEBUG
export const loadExportHistory = async (start, end) => {
  try {
    let query = "";
    if (start && end) query = `?start=${start}&end=${end}`;
    
    // ‚úÖ L·∫§Y T·∫§T C·∫¢ (OUT- + RET-) ƒë·ªÉ c√≥ th·ªÉ so kh·ªõp
    const res = await fetchExportHistory(query);
    console.log("üîç DEBUG - T·∫•t c·∫£ d·ªØ li·ªáu t·ª´ API:", res?.map(item => ({
      invoiceId: item.invoiceId,
      note: item.note
    })));
    
    return res || []; // ‚úÖ TR·∫¢ V·ªÄ T·∫§T C·∫¢, kh√¥ng l·ªçc
  } catch (err) {
    console.error(err);
    message.error("L·ªói khi t·∫£i l·ªãch s·ª≠ xu·∫•t kho");
    return [];
  }
};

// Nh·∫≠p th√™m kho
export const addInventoryStock = async (values) => {
  try {
    await importInventory({
      items: [
        {
          name: values.name,
          quantity: values.stock,
          unitCost: values.cost_per_unit,
          unitWeight: values.unitWeight,
          note: values.note,
          unit: values.unit,
          usageUnit: values.usageUnit,
          deductType: values.deductType || "byUsage",
        },
      ],
    });
    message.success("Nh·∫≠p kho th√†nh c√¥ng");
  } catch (err) {
    console.error(err);
    message.error("L·ªói khi nh·∫≠p kho");
  }
};
// =========================
// üì¶ EXPORT INVENTORY (Xu·∫•t kho)
// =========================
export const exportInventory = async (payload) => {
  try {
    const res = await axios.post(`${API_URL}/inventory/export`, payload, {
      headers: { "Content-Type": "application/json" },
    });
    return res.data;
  } catch (error) {
    console.error("Export inventory error:", error);
    throw error;
  }
};
// =========================
// üßæ ORDERS (ƒê∆°n h√†ng)
// =========================
export const createOrder = async (payload) => {
  const res = await axios.post(`${API_URL}/orders`, payload, {
    headers: { "Content-Type": "application/json" },
  });
  return res.data;
};

export const fetchOrders = async () => {
  const res = await axios.get(`${API_URL}/orders`);
  return res.data;
};

// ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng v·ªõi log chi ti·∫øt
export const updateOrderStatus = async (orderId, status) => {
  try {
    console.log(`üìû [API] G·ªçi updateOrderStatus: ${orderId} -> ${status}`);
    const response = await axios.put(`${API_URL}/orders/${orderId}/status`, {
      status: status
    });
    console.log(`‚úÖ [API] updateOrderStatus th√†nh c√¥ng: ${orderId} -> ${status}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå [API] L·ªói updateOrderStatus: ${orderId} -> ${status}`, error);
    throw error;
  }
};
// üÜï C·∫≠p nh·∫≠t paymentMethod
export const updateOrderPayment = async (orderId, paymentMethod) => {
  const res = await axios.put(`${API_URL}/orders/${orderId}/payment`, { paymentMethod });
  return res.data;
};
// ‚úÖ Xu·∫•t kho t·ª´ ƒë∆°n h√†ng v·ªõi log chi ti·∫øt
export const exportInventoryFromOrder = async (orderId, cartItems) => {
  try {
    console.log(`üìû [API] G·ªçi exportInventoryFromOrder: ${orderId}`);
    const response = await axios.post(`${API_URL}/inventory/export-from-order`, {
      orderId,
      items: cartItems
    });
    console.log(`‚úÖ [API] exportInventoryFromOrder th√†nh c√¥ng: ${orderId}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå [API] L·ªói exportInventoryFromOrder: ${orderId}`, error);
    throw error;
  }
};
// üÜï Th√™m h√†m h·ªßy nguy√™n li·ªáu ƒë√£ khui
export const disposeOpenedIngredient = async (ingredientId, disposedWeight, reason) => {
  try {
    const response = await axios.post(`${API_URL}/inventory/${ingredientId}/dispose-opened`, {
      disposedWeight,
      reason
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi h·ªßy nguy√™n li·ªáu ƒë√£ khui:", error);
    throw error;
  }
};

// üÜï Th√™m h√†m l·∫•y chi ti·∫øt nguy√™n li·ªáu ƒë√£ khui
export const getOpenedIngredientDetails = async (ingredientId) => {
  try {
    const response = await axios.get(`${API_URL}/inventory/${ingredientId}/opened-details`);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt nguy√™n li·ªáu ƒë√£ khui:", error);
    throw error;
  }
};
// üÜï L·∫§Y TO√ÄN B·ªò PHI·∫æU XU·∫§T (OUT- v√† RET-) cho m·ª•c ki·ªÉm tra ho√†n kho
export const fetchAllExportHistory = async (query = "") => {
  try {
    const res = await axios.get(`${API_URL}/inventory/export-history${query}`);
    const allData = res.data || [];
    console.log("üßæ T·∫•t c·∫£ phi·∫øu xu·∫•t (OUT + RET):", allData.map(d => d.invoiceId));
    return allData;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y to√†n b·ªô export history:", error);
    return [];
  }
};

